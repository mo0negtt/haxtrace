Herramientas de la toolbar
Add Vertex (Botón #vertexTool)

Qué hace: al hacer clic izquierdo en el canvas añade un nuevo vértice en la posición del cursor (coordenadas world).
Uso: herramienta por defecto; clic izquierdo para crear.
Código: disparado en main.js dentro de onCanvasClick cuando tools.currentTool === 'vertex' → mapData.addVertex(...); UI actualizada por UIManager.updateUI() y render por Renderer.render().
Add Segment (Botón #segmentTool)

Qué hace: permite seleccionar dos vértices existentes; cuando hay dos seleccionados crea un segmento entre ellos con color y curva desde los inputs.
Uso: seleccionar (clic) sobre vértices; al tener 2, se crea el segmento automáticamente.
Código: lógica en main.js (onCanvasClick usa mapData.getVertexAt y tools.selectVertex), creación via mapData.addSegment(...); color/curve leídos de #segmentColor y #segmentCurve.
Pan (Botón #panTool)

Qué hace: permite desplazar la vista del mapa (panning) arrastrando con clic izquierdo.
Uso: seleccionar Pan y arrastrar; cursor cambia a grab/grabbing.
Código: Renderer.startPan, Renderer.updatePan, Renderer.endPan en renderer.js; eventos manejados en main.js (onMouseDown, onMouseMove, onMouseUp).
Controles de Zoom (grupo)
Zoom In / Zoom Out / Reset Zoom (zoomIn(), zoomOut(), resetZoom())
Qué hacen: aumentan/reducen/restablecen la escala de visualización (Renderer.zoom) y actualizan #zoomLevel.
Uso: botones + / - y Reset.
Código: métodos en renderer.js (zoomIn, zoomOut, resetZoom) y uiManager.updateZoomDisplay().
Panel de edición de curva (Curve Editor)
Panel flotante #curveEditorPanel
Qué hace: cuando se selecciona un segmento muestra controles para editar su curve (input numérico + slider). Si hay múltiples segmentos seleccionados muestra mensaje.
Uso: seleccionar segmento(s) (clic en segmento con tool Pan) → editar valor o mover con drag derecho.
Código: UI en uiManager.updateCurveEditor(); cambios aplicados por main.js en la función updateCurve (modifica data.segments[segmentIndex].curve y re-render).
Interacciones específicas (mouse/teclado)
Mover vértice (drag con botón derecho)

Qué hace: al hacer mousedown derecho sobre un vértice inicia dragging; al mover actualiza las coordenadas del vértice.
Código: main.js usa isDraggingVertex, draggedVertexIndex y en onMouseMove actualiza mapData.data.vertexes[..]; al soltar guarda saveHistory().
Ajustar curva arrastrando segmento (botón derecho)

Qué hace: mousedown derecho sobre segmento → drag horizontal cambia curve proporcionalmente; se actualizan inputs y render en tiempo real.
Código: main.js usa isDraggingSegment, calcula rawCurveChange = deltaX * 0.05, clampa y actualiza data.segments[..].curve.
Selección múltiple de segmentos

Qué hace: al seleccionar segmentos con Shift se permite seleccionar varios; el panel de curvas muestra mensaje si >1 seleccionado.
Código: tools.selectSegment(index, multiSelect) en tools.js y UIManager.updateCurveEditor().
Undo / Redo

Qué hace: Ctrl+Z y Ctrl+Y/Ctrl+Shift+Z restauran estados anteriores guardados en la pila history.
Código: saveHistory, undo, redo en main.js.
Clase Tools (estado interno y métodos)
Propósito: mantiene la herramienta activa y las selecciones.
Propiedades:
currentTool — 'vertex' | 'segment' | 'pan'
selectedVertices — array de índices (temporal para crear segmentos)
selectedSegments — array de índices (para editar curvas/selección)
Métodos (tools.js):
setTool(tool) — cambia herramienta, limpia selecciones y actualiza clases CSS de botones.
selectVertex(index) — añade índice a selectedVertices.
clearSelection() — limpia selectedVertices.
selectSegment(index, multiSelect = false) — selecciona segmento (respeta multiSelect).
clearSegmentSelection() — limpia selectedSegments.
Import/Export (como herramienta de IO)
Export HBS
Qué hace: serializa mapData, invierte el signo de curve para compatibilidad y descarga .hbs.
Código: ImportExport.exportMap() en importExport.js.
Import HBS
Qué hace: carga archivo JSON, invierte signo de curve al importar y actualiza mapData.
Código: ImportExport.handleImportFile(e).